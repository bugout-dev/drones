import os

BUGOUT_DRONES_TOKEN = os.environ.get("BUGOUT_DRONES_TOKEN")
if BUGOUT_DRONES_TOKEN is None or BUGOUT_DRONES_TOKEN == "":
    raise ValueError("BUGOUT_DRONES_TOKEN environment variable must be set")
BUGOUT_DRONES_TOKEN_HEADER = os.environ.get("BUGOUT_DRONES_TOKEN_HEADER")
if BUGOUT_DRONES_TOKEN_HEADER is None or BUGOUT_DRONES_TOKEN_HEADER == "":
    raise ValueError("BUGOUT_DRONES_TOKEN_HEADER environment variable must be set")

# S3
DRONES_BUCKET = os.environ.get("BUGOUT_AWS_S3_DRONES_BUCKET")
if DRONES_BUCKET is None:
    raise ValueError("BUGOUT_AWS_S3_DRONES_BUCKET environment variable must be set")
DRONES_BUCKET_STATISTICS_PREFIX_RAW = os.environ.get(
    "BUGOUT_AWS_S3_DRONES_BUCKET_STATISTICS_PREFIX"
)
if DRONES_BUCKET_STATISTICS_PREFIX_RAW is None:
    raise ValueError(
        "BUGOUT_AWS_S3_DRONES_BUCKET_STATISTICS_PREFIX environment variable must be set"
    )
DRONES_BUCKET_STATISTICS_PREFIX = DRONES_BUCKET_STATISTICS_PREFIX_RAW.rstrip("/")

STATISTICS_S3_PRESIGNED_URL_EXPIRATION_TIME = 60  # seconds

# REDIS
BUGOUT_REDIS_URL = os.getenv("BUGOUT_REDIS_URL")
BUGOUT_REDIS_PASSWORD = os.getenv("BUGOUT_REDIS_PASSWORD")
REPORTS_CHUNK_SIZE = int(os.getenv("REDIS_REPORTS_CHUNK_SIZE", "100"))
WAITING_UNTIL_NEW_REPORTS = int(os.getenv("BUGOUT_WAITING_UNTIL_NEW_REPORTS", "10"))
REDIS_REPORTS_QUEUE = os.getenv("REDIS_REPORTS_QUEUE", "reports_queue")
REDIS_FAILED_REPORTS_QUEUE = os.getenv("REDIS_FAILED_REPORTS_QUEUE", "failed_reports")

# HUMBUG
HUMBUG_REPORTS_MAX_TAG_LENGTH_RAW = os.environ.get("HUMBUG_REPORTS_MAX_TAG_LENGTH")
HUMBUG_REPORTS_MAX_TAG_LENGTH = 256
try:
    if HUMBUG_REPORTS_MAX_TAG_LENGTH_RAW is not None:
        HUMBUG_REPORTS_MAX_TAG_LENGTH = int(HUMBUG_REPORTS_MAX_TAG_LENGTH_RAW)
except:
    raise ValueError(
        f"HUMBUG_REPORTS_MAX_TAG_LENGTH must be an integer: {HUMBUG_REPORTS_MAX_TAG_LENGTH_RAW}"
    )

# Great Wyrm votes
MOONSTREAM_S3_PUBLIC_DATA_BUCKET = os.environ.get("MOONSTREAM_S3_PUBLIC_DATA_BUCKET")
MOONSTREAM_S3_PUBLIC_DATA_BUCKET_PREFIX = os.environ.get(
    "MOONSTREAM_S3_PUBLIC_DATA_BUCKET_PREFIX", "dev"
)

DRONES_CONFIG_FILE_PATH = os.getenv(
    "DRONES_CONFIG_FILE_PATH", "/home/ubuntu/.drones/config.json"
)
